import java.util.*;

public class Djkstra {

    private static final int INF = Integer.MAX_VALUE;

    public static void main(String[] args) {
        int[][] graph = {
                {0, 4, 0, 0, 0, 0, 0, 8, 0},
                {4, 0, 8, 0, 0, 0, 0, 11, 0},
                {0, 8, 0, 7, 0, 4, 0, 0, 2},
                {0, 0, 7, 0, 9, 14, 0, 0, 0},
                {0, 0, 0, 9, 0, 10, 0, 0, 0},
                {0, 0, 4, 14, 10, 0, 2, 0, 0},
                {0, 0, 0, 0, 0, 2, 0, 1, 6},
                {8, 11, 0, 0, 0, 0, 1, 0, 7},
                {0, 0, 2, 0, 0, 0, 6, 7, 0}
        };

        int startVertex = 0;
        int[] shortestDistances = dijkstra(graph, startVertex);

        System.out.println("Shortest distances from vertex " + startVertex + " to:");
        for (int i = 0; i < shortestDistances.length; i++) {
            System.out.println(i + ": " + shortestDistances[i]);
        }
    }


    public static int[] dijkstra(int[][] graph, int start) {
        int n = graph.length;
        int[] distance = new int[n];
        boolean[] visited = new boolean[n];

        Arrays.fill(distance, INF);
        distance[start] = 0;

        for (int count = 0; count < n - 1; count++) {
            int minVertex = findMinVertex(distance, visited);
            visited[minVertex] = true;

            for (int v = 0; v < n; v++) {
                if (!visited[v] && graph[minVertex][v] != 0 &&
                        distance[minVertex] != INF &&
                        distance[minVertex] + graph[minVertex][v] < distance[v]) {
                    distance[v] = distance[minVertex] + graph[minVertex][v];
                }
            }
        }
        return distance;
    }

    public static int findMinVertex(int[] distance, boolean[] visited) {
        int minDistance = INF;
        int minVertex = -1;

        for (int v = 0; v < distance.length; v++) {
            if (!visited[v] && distance[v] <= minDistance) {
                minDistance = distance[v];
                minVertex = v;
            }
        }
        return minVertex;
    }
}
